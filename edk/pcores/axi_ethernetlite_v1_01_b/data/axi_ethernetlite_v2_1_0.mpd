#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_ethernetlite
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_ethernetlite

## Peripheral Options
OPTION STYLE = HDL
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION ALERT = This design requires design constraints to guarantee performance.\nPlease refer to the data sheet for details.  \nThe AXI clock frequency must be greater than or equal to 50 MHz for 100 Mbs Ethernet operation and greater than or equal to 5.0 MHz for 10 Mbs Ethernet operation.
OPTION USAGE_LEVEL = BASE_USER
#OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION SYSLEVEL_DRC_PROC = check_syslevel_drcs
OPTION RUN_NGCBUILD = TRUE
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
OPTION DESC = AXI 10/100 Ethernet MAC Lite
OPTION LONG_DESC = 'IEEE Std. 802.3 MII interface MAC with AXI interface, lightweight implementation'
OPTION IP_GROUP = Communication High-Speed:MICROBLAZE:ARM-A9
OPTION DATASHEET_NAME = ds787_axi_ethernetlite
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION, virtex7ht=PRE_PRODUCTION, qvirtex7=PRE_PRODUCTION, qkintex7=PRE_PRODUCTION, qkintex7l=PRE_PRODUCTION, qartix7=PRE_PRODUCTION, qartix7l=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION, qvirtex7l=PRE_PRODUCTION)

IO_INTERFACE IO_IF = ethernet_0, IO_TYPE = XIL_AXIETHERNET_V1

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_PROTOCOL = AXI4, BUS = S_AXI, VALUES = (AXI4LITE=AXI4LITE, AXI4=AXI4)
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_INSTANCE = axi_ethernetlite_inst, DT = STRING
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x02000, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_PERIOD_PS = 10000, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = REQUIRE, IO_IS = clk_freq
PARAMETER C_S_AXI_ADDR_WIDTH = 13, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, RANGE = (1:16)
PARAMETER C_INCLUDE_MDIO = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_GLOBAL_BUFFERS = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (![xstrncmp C_FAMILY  spartan6 ])
PARAMETER C_INCLUDE_INTERNAL_LOOPBACK = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_DUPLEX = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_TX_PING_PONG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_RX_PING_PONG = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_INCLUDE_PHY_CONSTRAINTS = 1, DT = INTEGER, RANGE = (0,1), TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 1, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 1, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING, INTERRUPT_PRIORITY = HIGH
PORT S_AXI_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [12:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [3:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WLAST = WLAST, DIR = I, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BID = BID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [12:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RID = RID, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RLAST = RLAST, DIR = O, BUS = S_AXI, ISVALID = ([xstrncmp C_S_AXI_PROTOCOL  AXI4])
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT PHY_tx_clk = "", DIR = I, PERMIT = BASE_USER, BUFFER_TYPE = IBUF, DESC = 'Ethernet Transmit Clock Input', IO_IF = ethernet_0, IO_IS = ETH_TXC
PORT PHY_rx_clk = "", DIR = I, PERMIT = BASE_USER, BUFFER_TYPE = IBUF, DESC = 'Ethernet Receive Clock Input', IO_IF = ethernet_0, IO_IS = ETH_RXC
PORT PHY_crs = "", DIR = I, PERMIT = BASE_USER, DESC = 'Ethernet Carrier Sense Input', IO_IF = ethernet_0, IO_IS = ETH_CRS
PORT PHY_dv = "", DIR = I, PERMIT = BASE_USER, DESC = 'Ethernet Receive Data Valid', IO_IF = ethernet_0, IO_IS = ETH_RXDV
PORT PHY_rx_data = "", DIR = I, VEC = [3:0], PERMIT = BASE_USER, DESC = 'Ethernet Receive Data Input', IO_IF = ethernet_0, IO_IS = ETH_RXD
PORT PHY_col = "", DIR = I, PERMIT = BASE_USER, DESC = 'Ethernet Collision Input', IO_IF = ethernet_0, IO_IS = ETH_COL
PORT PHY_rx_er = "", DIR = I, PERMIT = BASE_USER, DESC = 'Ethernet Receive Error Input', IO_IF = ethernet_0, IO_IS = ETH_RXER
PORT PHY_rst_n = "", DIR = O, PERMIT = BASE_USER, DESC = 'Ethernet PHY Reset', IO_IF = ethernet_0, IO_IS = PHY_RESETn
PORT PHY_tx_en = "", DIR = O, PERMIT = BASE_USER, DESC = 'Ethernet Transmit Enable', IO_IF = ethernet_0, IO_IS = ETH_TXEN
PORT PHY_tx_data = "", DIR = O, VEC = [3:0], PERMIT = BASE_USER, DESC = 'Ethernet Transmit Data Output', IO_IF = ethernet_0, IO_IS = ETH_TXD
PORT PHY_MDC = "", DIR = O, PERMIT = BASE_USER, ISVALID = (C_INCLUDE_MDIO==1), ASSIGNMENT = REQUIRE, DESC = 'Ethernet PHY Management Clock', IO_IF = ethernet_0, IO_IS = ETH_MDC
PORT PHY_MDIO_I = "", DIR = I, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_I
PORT PHY_MDIO_O = "", DIR = O, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_O
PORT PHY_MDIO_T = "", DIR = O, ISVALID = (C_INCLUDE_MDIO==1), IO_IF = ethernet_0, IO_IS = ETH_MDIO_T
PORT PHY_MDIO = "", DIR = IO, TRI_O = PHY_MDIO_O, TRI_T = PHY_MDIO_T, TRI_I = PHY_MDIO_I, THREE_STATE = TRUE, PERMIT = BASE_USER, ISVALID = (C_INCLUDE_MDIO==1), DESC = 'Ethernet PHY Management Data', IO_IF = ethernet_0, IO_IS = ETH_MDIO

END
